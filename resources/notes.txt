Graph layout:

    Overview:
        Stops are vertices.
        Directed graph with edges between stops.

    Edges:
        Journeys from stop_times represent directed edges.
            - Can only add an edge between two consecutive stops with same trip id.
        All lines in transfers are edges (directed)

    Costs:
        1 if it comes from stop_times
        2 if it comes from transfers.txt with transfer type 0
        For transfer type 2 cost = minimum transfer time / 100

Requirements:

    1.  Finding the shortest paths between 2 bus stops (as input by the user), returning the list of stops
        en route as well as the associated “cost”

        -Can't immediately identify a heuristic that could be used. So dijkstra? No negative weights and most likely
         cycles in the graph.

    2.  Searching for a bus stop by full name or by the first few characters in the name, using a
        ternary search tree (TST), returning the full stop information for each stop matching the
        search criteria (which can be zero, one or more stops).

        - Haven't covered TST's yet but seems like the least ambiguous goal.

    3.  Searching for all trips with a given arrival time, returning full details of all trips matching the
        criteria (zero, one or more), sorted by trip id.

        - Easy solution - have a list of stops sorted by arrival time. Might not be memory efficient.
          Probably ways to have repeated values only stored once in memory.

    4.  Provide front interface enabling selection between the above features or an option to exit
        the programme, and enabling required user input. It does not matter if this is command-line
        or graphical UI, as long as functionality/error checking is provided.


